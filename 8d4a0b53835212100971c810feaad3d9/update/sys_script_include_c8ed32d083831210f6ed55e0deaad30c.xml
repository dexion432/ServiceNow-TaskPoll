<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_376096_tpoll.PollUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>TODO für 15.01: &#13;
1.) basic API per background script verifizieren: this._request in verbindung mit this._prepareTableAPI auf eine instanz der wahl&#13;
   a) auth mechanismus verifizieren&#13;
   b) batch api verifzieren &#13;
   c) callbacks verifizieren &#13;
2.) den m2m lookup generalisieren (single function)&#13;
3.) import set erstellung: d.h. importset erzeugen und inserts in the tpoll incident tabelle machen&#13;
</description>
        <mobile_callable>false</mobile_callable>
        <name>PollUtil</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[/* global Class, gs, sn_cc, sn_ws, x_376096_tpoll */
/* global GlideRecord, GlideDateTime, GlideImportSetTransformer */
/* eslint no-undef: "error" */
var PollUtil = Class.create();
PollUtil.prototype = {
	transform: function (importSetGr, transformMaps) {
		const transformer = new GlideImportSetTransformer();
		for (let i = 0; i < transformMaps.length; i++) {
			transformer.setMapID(transformMaps[i]);
		}
		transformer.transformAllMaps(importSetGr);
	},
	createImportRows: function (incidents) {
		const importSetGr = new GlideRecord('sys_import_set');
		importSetGr.short_description = this.connAliasSysID;
		importSetGr.table_name = 'x_376096_tpoll_int_incident';
		importSetGr.state = 'loading';
		const importSetID = importSetGr.insert();

		Object.values(incidents).forEach(data => {
			let importRowGr = new GlideRecord('x_376096_tpoll_int_incident');
			importRowGr.newRecord();
			importRowGr.sys_import_set = importSetID;
			importRowGr.remote_sys_id = data.remote_incident.sys_id;
			importRowGr.source = this.connAliasSysID;

			const vecFields = ['attachment', 'comments', 'work_notes'];
			vecFields.forEach(name => importRowGr['u_' + name] = JSON.stringify(data.remote_incident[name] || []));

			for (const [remoteField, localField] of Object.entries(this._remote2localFields)) {
				importRowGr[localField] = remoteField;
			}

			importRowGr.insert();
		});

		importSetGr.state = 'loaded';
		importSetGr.update();
	},
	getLastUpdateTime: function () {
		return this._lastUpdatedTime;
	},
	syncIncidents: function () {
		const lastUpdateTime = this.getLastUpdateTime();

		const incidents = {
			/*
			"<remote incident sys id>": {
				remote_incident: {
					sys_id: "remote inc sys_id",
					short_description: "remote inc short description",
					description: "remote inc description",
					state: 5,
					comments: [],
					work_notes: [],
					attachments: [] 
				},
				incident_tasks: [{
					sys_id: "remote inc sys_id",
					work_notes: [],
					comments: [{
						sys_created_by: "remote user_name",
						value: "comment or work note"
					}],
					attachments: []
				}]
			}*/
		};
		this._request([
			// get incident status updates (because we have read access to closed incident_tasks) and private communications
			this._processIncidentTasks(lastUpdateTime, incidents),
			this._processUpdatedIncidents(lastUpdateTime, incidents),
			this._processJournalFields(lastUpdateTime, incidents),
			this._processAttachments(lastUpdateTime, incidents)
		]);

		this.createImportRows(incidents);
	},
	_processIncidentTasks: function (lastUpdatedTime, cache) {
		// detects new incidents
		// detects closed incidents (when incidents can no longer be read)
		// handles private communication
		return this._prepareTableAPI({
			table: 'incident_task',
			query: this._incidentTaskFilter + '^sys_updated_on>=' + lastUpdatedTime,
			fields: ['sys_id', 'state', 'incident', 'incident.state'],
			callback: (resp) => {
				// process all known incident tasks
				resp.result.forEach(incTask => {
					const remoteInc = this._getRemoteIncident(incTask.incident || incTask.sys_id, incTask.incident ? 'incident' : 'incident_task');
					const incident = cache[remoteInc] ??= {
						remote_incident: {
							state: incTask['incident.state'],
							sys_id: incTask['incident']
						}
					};

					if (incTask.incident) {
						incident.state = incTask['incident.state'];
					} else {
						// if the incident is no longer readable, the incident must be considered can be considered closed
						incident.state = null;
					}
				});
			}
		});
	},
	_processUpdatedIncidents: function (lastUpdatedTime, cache) {
		return this._prepareTableAPI({
			table: 'incident',
			// get all incident which have been either updated since we last synced, or for which a incident_task we can read was created retrospectively
			query: 'sys_updated_on>=' + lastUpdatedTime + '^NQsys_updated_on<' + lastUpdatedTime + '^RLQUERYincident_task.incident,>0^sys_updated_on>=' + lastUpdatedTime,
			fields: Object.keys(this._remote2localFields),
			callback: (resp) => {
				resp.result.forEach(remoteInc => {
					gs.info(remoteInc['number']);
					const data = cache[remoteInc.sys_id] ??= {
						remote_incident: remoteInc
					};

					// override potential incomplete value from incident_task callback
					data.remote_incident = remoteInc;
				});
			}
		});
	},
	_processJournalFields: function (lastUpdatedTime, cache) {
		return this._prepareTableAPI({
			table: 'sys_journal_field',
			// TODO: hier ist der retrospective task assignment nicht berücksichtigt, es braucht noche eine RLQUERY?
			// beispiel: wenn ich einen INC gestern eröffnet habe aber noch nicht bedag zugewiesen habe,
			// dann einige updates auf bestehenden INCs mache (d.h. lastUpdateTime == *heute*)
			// und *heute* den INC erst an bedag zuweise (indem ich einen inc task erstelle),
			// dann würde diese query nur diejenigen journal fields abfragen die seite *heute* erstellt wurden

			// name=incident^ORname=incident_task^sys_created_on>=javascript:gs.dateGenerate('2024-10-27','00:00:00')
			query: 'name=incident^ORname=incident_task^sys_created_on>=' + lastUpdatedTime + '^ORDERBYsys_created_on',
			fields: ['sys_id', 'element', 'element_id', 'value', 'name', 'sys_created_by'],
			callback: (resp) => {
				resp.result.forEach(journal => {
					var remoteInc = cache[this._getRemoteIncident(journal['element_id'],journal['name'] )];
					if (remoteInc) {
						(remoteInc.remote_incident[journal.element] ??= []).push(journal);
					} else {
						// most likely an ACL missconfiguration because we can read an attachment for
						// incident or incident_task which we have not (and will not - at least in this execution)
						// synced yet
					}
				});
			}
		});
	},
	_processAttachments: function (lastUpdatedTime, cache) {
		return this._prepareTableAPI({
			table: 'sys_attachment',
			// TODO: gleiches problem hier mit retrospektivisch zugewiesenen INCs
			query: 'table_name=incident^ORtable_name=incident_task^sys_updated_on>=' + lastUpdatedTime,
			fields: ['table_name', 'sys_id', 'table_sys_id', 'file_name', 'size_bytes', 'content_type', 'hash'],
			callback: (resp) => {
				resp.result.forEach(remoteAtt => {
					var remoteInc = cache[this._getRemoteIncident(remoteAtt['table_sys_id'],remoteAtt['table_name'] )];
					if (remoteInc) {
						(remoteInc.attachments ??= []).push(remoteAtt);
					} else {
						// most likely an ACL missconfiguration because we can read an attachment for
						// incident or incident_task which we have not (and will not - at least in this execution)
						// synced yet
					}
				});
			}
		});
	},
	_getRemoteIncident: function (remoteTaskSysID, remoteTaskTable) {
		if (remoteTaskTable == 'incident') {
			return remoteTaskSysID;
		}

		const m2mID = new GlideRecord('x_376096_tpoll_m2m_id');
		m2mID.addQuery('remote_id', remoteTaskSysID);
		m2mID.orderByDesc('sys_created_on');
		m2mID.setLimit(1);
		m2mID.query();
		if (m2mID.next()) {
			return m2mID.metadata.remote_incident;
		}
	},
	initialize: function (connAliasSysID) {
		const importRowGr = new GlideRecord('x_376096_tpoll_int_incident');
		importRowGr.addQuery('x_376096_tpoll_m2m_id', connAliasSysID);
		importRowGr.orderByDesc('sys_updated_on');
		importRowGr.setLimit(1);
		if (importRowGr.next()) {
			this._lastUpdatedTime = new GlideDateTime(importRowGr.sys_updated_on);
		} else {
			this._lastUpdatedTime = new GlideDateTime('1970-01-01 00:00:00');
		}

		this.connAliasSysID = connAliasSysID;
		this.connInfo = new sn_cc.ConnectionInfoProvider().getConnectionInfo(connAliasSysID);
		this.connURL = this.connInfo.getAttribute('connection_url');
		if (!this.connURL.endsWith('/')) {
			this.connURL += '/';
		}

		this._incidentTaskFilter = this.connInfo.getExtendedAttributes().u_incident_task_filter || 'assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORassignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744';

		this._remote2localFields = {
			sys_id: "remote_sys_id"
		};
		const dictionaryGr = new GlideRecord('sys_dictionary');
		dictionaryGr.addQuery('sys_id', 'IN', this.connInfo.getExtendedAttributes().u_pod_fields);
		dictionaryGr.query();
		while (dictionaryGr.next()) {
			const column = dictionaryGr.element.toString();
			const scope = dictionaryGr.sys_scope.scope.toString();
			if (column.startsWith(scope)) {
				// x_scopeid_fieldname => fieldname
				this._remote2localFields[column.substring(scope.length + 1)] = column;
			} else if (column.startsWith('u_')) {
				this._remote2localFields[column.substring(2)] = column;
			} else {
				gs.error('Invalid remote2local field detected: ' + dictionaryGr.sys_id);
			}
		}

		const type = this.connInfo.getCredentialAttribute('type');
		if (type == 'oauth_2_0') {
			const credSysID = this.connInfo.getCredentialAttribute('sys_id');
			const profileGr = new GlideRecord('oauth_requestor_profile');
			profileGr.addQuery('requestor_context', 'oauth_2_0_credentials');
			profileGr.addQuery('requestor_id', credSysID);
			profileGr.setLimit(1);
			profileGr.query();
			if (profileGr.next()) {
				const oAuthInfo = {
					authenticationProfile: {
						type: 'oauth2',
						profileId: profileGr.getValue('oauth_entity_profile')
					},
					requestorProfile: {
						requestorContext: 'oauth_2_0_credentials',
						requestorId: credSysID
					}
				};

				this._authReq = function (req) {
					req.setAuthenticationProfile(oAuthInfo.authenticationProfile.type, oAuthInfo.authenticationProfile.profileId);
					if (oAuthInfo.requestorProfile) {
						req.setRequestorProfile(this.authInfo.requestorProfile.requestorContext, this.authInfo.requestorProfile.requestorId);
					}
				};
			}
		} else if (type == 'basic_auth') {
			const basicAuthInfo = {
				username: this.connInfo.getCredentialAttribute('user_name'),
				password: this.connInfo.getCredentialAttribute('password')
			};

			this._authReq = function (req) {
				req.setBasicAuth(basicAuthInfo.username, basicAuthInfo.password);
			};
		} else if (type == 'api_key') {
			const apiKey = this.connInfo.getCredentialAttribute('api_key');
			this._authReq = function (req) {
				req.setRequestHeader('x-sn-apikey', apiKey);
			};
		}

		if (!this._authReq) {
			throw new Error('Unhandled or incomplete credentials: ' + type);
		}
	},

	/**
	 * @param {{
	 * 	headers: object<string,string>[],
	 *  url: string, 
	 *  method: 'get'|'post'|'put'
	 * }[]} preparedRequests
	 */
	_request: function (preparedRequests) {
		// prepare for batch api
		for (let i = 0; i < preparedRequests.length; i++) {
			const preparedReq = preparedRequests[i];
			preparedReq.id = String(i + 1);
			if (preparedReq.body) {
				preparedReq.body = gs.base64Encode(preparedReq.body);
			}
		}

		let req = new sn_ws.RESTMessageV2();
		req.setEndpoint(this.connURL + 'api/now/v1/batch');
		req.setHttpMethod('POST');
		req.setRequestHeader('Accept', 'application/json');
		req.setRequestHeader('Content-Type', 'application/json');
		req.setRequestBody(JSON.stringify({
			batch_request_id: '1',
			rest_requests: preparedRequests
		}));

		this._authReq(req);
		const resp = req.execute();
		if (resp.haveError()) {
			return {
				status: 'error',
				message: resp.getErrorMessage(),
				code: resp.getErrorCode()
			};
		}

		const requests = JSON.parse(resp.getBody()).serviced_requests;
		for (let i = 0; i < preparedRequests.length; i++) {
			const preparedReq = preparedRequests[i];
			const reqResp = requests.find(req => req.id == preparedReq.id);
			preparedReq?.callback(reqResp.body_encoding == 'base64' ? gs.base64Decode(reqResp.body) : reqResp.body);
		}

		// TODO: handle <response>.unserviced_requests

		return {
			status: 'success',
			requests: requests
		};
	},

	_prepareTableAPI: function ({
		table,
		query,
		fields,
		limit,
		offset,
		callback
	}) {
		const params = [];
		if (query) {
			params.push('sysparm_query=' + encodeURIComponent(query));
		}

		if (limit) {
			params.push('sysparm_limit=' + limit);
		}

		if (offset) {
			params.push('sysparm_offset=' + offset);
		}

		if (fields?.length) {
			params.push('sysparm_fields=' + encodeURIComponent(fields.join(',')));
		}

		params.push('sysparm_exclude_reference_link=true');

		let url = 'api/now/table/' + table;
		if (params.length) {
			url += '?' + params.join('&');
		}

		return {
			method: 'GET',
			url: url,
			headers: [{
				name: 'Content-Type',
				value: 'application/json'
			}, {
				name: 'Accept',
				value: 'application/json'
			}],
			exclude_response_headers: true,
			callback: function (strResult) {
				return callback(JSON.parse(strResult));
			}
		};
	},

	type: 'PollUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2025-01-08 12:55:10</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>c8ed32d083831210f6ed55e0deaad30c</sys_id>
        <sys_mod_count>145</sys_mod_count>
        <sys_name>PollUtil</sys_name>
        <sys_package display_value="Task Poll" source="x_376096_tpoll">8d4a0b53835212100971c810feaad3d9</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Task Poll">8d4a0b53835212100971c810feaad3d9</sys_scope>
        <sys_update_name>sys_script_include_c8ed32d083831210f6ed55e0deaad30c</sys_update_name>
        <sys_updated_by>Keri.Csaba</sys_updated_by>
        <sys_updated_on>2025-01-16 15:01:08</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>c8ed32d083831210f6ed55e0deaad30c</id>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2025-01-08 12:55:09</sys_created_on>
        <sys_id>a8074bdc83831210f6ed55e0deaad3b3</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2025-01-08 12:55:09</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
